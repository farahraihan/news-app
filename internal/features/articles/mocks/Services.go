// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	articles "news-app-be23/internal/features/articles"

	mock "github.com/stretchr/testify/mock"
)

// Services is an autogenerated mock type for the Services type
type Services struct {
	mock.Mock
}

// DeleteArticle provides a mock function with given fields: id
func (_m *Services) DeleteArticle(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllArticles provides a mock function with given fields:
func (_m *Services) GetAllArticles() ([]articles.Article, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllArticles")
	}

	var r0 []articles.Article
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]articles.Article, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []articles.Article); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.Article)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleByID provides a mock function with given fields: id
func (_m *Services) GetArticleByID(id uint) (*articles.Article, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetArticleByID")
	}

	var r0 *articles.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*articles.Article, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *articles.Article); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*articles.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertArticle provides a mock function with given fields: newArticle
func (_m *Services) InsertArticle(newArticle articles.Article) error {
	ret := _m.Called(newArticle)

	if len(ret) == 0 {
		panic("no return value specified for InsertArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(articles.Article) error); ok {
		r0 = rf(newArticle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateArticle provides a mock function with given fields: updatedArticle
func (_m *Services) UpdateArticle(updatedArticle articles.Article) error {
	ret := _m.Called(updatedArticle)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(articles.Article) error); ok {
		r0 = rf(updatedArticle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServices creates a new instance of Services. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServices(t interface {
	mock.TestingT
	Cleanup(func())
}) *Services {
	mock := &Services{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
